
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Parser;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import org.json.simple.*;
import com.google.gson.*;
import AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\004\000\002\003\002\000\002\003\004" +
    "\000\002\004\005\000\002\004\007\000\002\004\010\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\004\000\002\005\004\000\002\006" +
    "\006\000\002\010\004\000\002\010\002\000\002\011\005" +
    "\000\002\011\007\000\002\014\004\000\002\014\002\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\022\011\000\002\022\004\000\002\022\003\000\002\022" +
    "\005\000\002\022\012\000\002\022\007\000\002\022\005" +
    "\000\002\022\004\000\002\023\007\000\002\023\011\000" +
    "\002\024\005\000\002\024\003\000\002\025\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\003\000\002\027" +
    "\005\000\002\027\005\000\002\027\003\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\003\000\002\031\005\000\002\031\005\000\002" +
    "\031\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\003\000\002\033\004\000\002\033\004\000\002\033\003" +
    "\000\002\034\005\000\002\034\003\000\002\034\003\000" +
    "\002\034\006\000\002\034\004\000\002\034\004\000\002" +
    "\012\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\013\003" +
    "\000\002\013\002\000\002\016\005\000\002\016\003\000" +
    "\002\017\004\000\002\020\003\000\002\020\002\000\002" +
    "\021\005\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\016\002\ufffd\003\006\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\001\002\000\014\002\000\032\015\033\016" +
    "\034\012\035\014\001\002\000\004\002\010\001\002\000" +
    "\006\002\uffff\011\007\001\002\000\014\002\ufffc\032\ufffc" +
    "\033\ufffc\034\ufffc\035\ufffc\001\002\000\004\002\001\001" +
    "\002\000\014\002\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\001\002\000\004\051\ufff5\001\002\000\004\051\022\001" +
    "\002\000\004\051\ufff8\001\002\000\006\014\020\051\ufff7" +
    "\001\002\000\006\014\017\051\ufff6\001\002\000\004\051" +
    "\ufff3\001\002\000\004\051\ufff4\001\002\000\010\004\024" +
    "\011\023\027\025\001\002\000\050\004\uffc1\005\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\044\uffc1\045\uffc1\001\002\000\014\002\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\035\ufffb\001\002\000\014\005" +
    "\uffba\032\015\033\016\034\012\035\014\001\002\000\014" +
    "\030\032\031\030\046\027\047\033\050\026\001\002\000" +
    "\040\005\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\001\002\000\040\005\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\001\002\000\040\005\uffbd\010\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\001\002\000\004\011" +
    "\034\001\002\000\040\005\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\001\002\000\040" +
    "\005\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\001\002\000\014\002\ufffa\032\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\001\002\000\004\005\044\001\002" +
    "\000\006\005\uffbb\010\042\001\002\000\004\051\041\001" +
    "\002\000\006\005\uffb8\010\uffb8\001\002\000\006\005\uffb7" +
    "\010\uffb7\001\002\000\012\032\015\033\016\034\012\035" +
    "\014\001\002\000\006\005\uffb9\010\uffb9\001\002\000\004" +
    "\006\045\001\002\000\054\003\ufff0\004\ufff0\006\ufff0\007" +
    "\ufff0\013\ufff0\016\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0\001\002\000\014" +
    "\002\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\001\002\000" +
    "\054\003\uffec\004\uffec\006\uffec\007\uffec\013\uffec\016\uffec" +
    "\030\uffec\031\uffec\032\015\033\016\034\012\035\014\036" +
    "\uffec\037\uffec\041\uffec\042\uffec\043\uffec\046\uffec\047\uffec" +
    "\050\uffec\051\uffec\001\002\000\054\003\ufff1\004\ufff1\006" +
    "\ufff1\007\ufff1\013\ufff1\016\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\001\002" +
    "\000\004\051\022\001\002\000\044\003\075\004\064\006" +
    "\045\007\056\013\067\016\060\030\032\031\030\036\074" +
    "\037\062\041\057\042\061\043\100\046\027\047\033\050" +
    "\026\051\022\001\002\000\040\005\uffc8\010\uffc8\011\uffc8" +
    "\012\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\001\002" +
    "\000\020\005\uffd9\010\uffd9\011\uffd9\017\uffd9\020\uffd9\021" +
    "\142\022\143\001\002\000\004\011\212\001\002\000\060" +
    "\002\ufff2\003\ufff2\004\ufff2\006\ufff2\007\ufff2\013\ufff2\016" +
    "\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\001\002\000\004\004\206" +
    "\001\002\000\024\004\064\013\067\016\060\030\032\031" +
    "\030\046\027\047\033\050\026\051\022\001\002\000\026" +
    "\004\064\011\203\013\067\016\060\030\032\031\030\046" +
    "\027\047\033\050\026\051\022\001\002\000\004\004\173" +
    "\001\002\000\046\003\uffe6\004\uffe6\006\uffe6\007\uffe6\013" +
    "\uffe6\016\uffe6\030\uffe6\031\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\001\002\000\024\004\064\013\067\016\060\030\032" +
    "\031\030\046\027\047\033\050\026\051\022\001\002\000" +
    "\030\005\uffd6\010\uffd6\011\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\147\024\145\025\150\026\146\001\002\000" +
    "\050\004\130\005\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\167\044\127\045\126" +
    "\001\002\000\024\004\064\013\067\016\060\030\032\031" +
    "\030\046\027\047\033\050\026\051\022\001\002\000\034" +
    "\005\uffd1\010\uffd1\011\uffd1\012\153\013\152\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\001\002\000\040\005\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\001\002\000\012\005" +
    "\uffdd\010\uffdd\011\uffdd\020\164\001\002\000\044\003\uffeb" +
    "\004\uffeb\006\uffeb\007\uffeb\013\uffeb\016\uffeb\030\uffeb\031" +
    "\uffeb\036\uffeb\037\uffeb\041\uffeb\042\uffeb\043\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\001\002\000\024\004\064\013" +
    "\067\016\060\030\032\031\030\046\027\047\033\050\026" +
    "\051\022\001\002\000\044\003\uffe9\004\uffe9\006\uffe9\007" +
    "\uffe9\013\uffe9\016\uffe9\030\uffe9\031\uffe9\036\uffe9\037\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\046\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\001\002\000\014\005\uffdb\010\uffdb\011\uffdb\017\140" +
    "\020\uffdb\001\002\000\040\005\uffce\010\uffce\011\uffce\012" +
    "\uffce\013\uffce\014\122\015\123\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\001\002\000" +
    "\004\004\104\001\002\000\040\005\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\020\uffc5\021" +
    "\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\001\002" +
    "\000\044\003\uffed\004\uffed\006\uffed\007\uffed\013\uffed\016" +
    "\uffed\030\uffed\031\uffed\036\uffed\037\uffed\041\uffed\042\uffed" +
    "\043\uffed\046\uffed\047\uffed\050\uffed\051\uffed\001\002\000" +
    "\044\003\uffea\004\uffea\006\uffea\007\uffea\013\uffea\016\uffea" +
    "\030\uffea\031\uffea\036\uffea\037\uffea\041\uffea\042\uffea\043" +
    "\uffea\046\uffea\047\uffea\050\uffea\051\uffea\001\002\000\034" +
    "\004\ufff0\013\ufff0\016\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\001\002\000\034\004\064\013\067\016\060\030\032\031" +
    "\030\032\015\033\016\034\012\035\014\046\027\047\033" +
    "\050\026\051\022\001\002\000\004\011\107\001\002\000" +
    "\024\004\064\013\067\016\060\030\032\031\030\046\027" +
    "\047\033\050\026\051\022\001\002\000\004\005\111\001" +
    "\002\000\040\004\064\006\045\013\067\016\060\030\032" +
    "\031\030\036\074\037\112\041\057\042\061\043\100\046" +
    "\027\047\033\050\026\051\022\001\002\000\004\004\114" +
    "\001\002\000\046\003\uffe4\004\uffe4\006\uffe4\007\uffe4\013" +
    "\uffe4\016\uffe4\030\uffe4\031\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\046\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\001\002\000\024\004\064\013\067\016\060\030\032" +
    "\031\030\046\027\047\033\050\026\051\022\001\002\000" +
    "\004\005\116\001\002\000\040\004\064\006\045\013\067" +
    "\016\060\030\032\031\030\036\074\037\112\041\057\042" +
    "\061\043\100\046\027\047\033\050\026\051\022\001\002" +
    "\000\004\040\120\001\002\000\040\004\064\006\045\013" +
    "\067\016\060\030\032\031\030\036\074\037\112\041\057" +
    "\042\061\043\100\046\027\047\033\050\026\051\022\001" +
    "\002\000\046\003\uffe8\004\uffe8\006\uffe8\007\uffe8\013\uffe8" +
    "\016\uffe8\030\uffe8\031\uffe8\036\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\001\002\000\024\004\064\013\067\016\060\030\032\031" +
    "\030\046\027\047\033\050\026\051\022\001\002\000\024" +
    "\004\064\013\067\016\060\030\032\031\030\046\027\047" +
    "\033\050\026\051\022\001\002\000\046\004\130\005\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\044\127\045\126\001\002\000\040\005\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\001\002\000\040\005\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\017\uffc2\020\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\001\002\000\040" +
    "\005\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\001\002\000\026\004\064\005\uffb5\013" +
    "\067\016\060\030\032\031\030\046\027\047\033\050\026" +
    "\051\022\001\002\000\010\005\uffb3\010\uffb3\011\uffb3\001" +
    "\002\000\004\005\136\001\002\000\006\005\uffb6\010\134" +
    "\001\002\000\024\004\064\013\067\016\060\030\032\031" +
    "\030\046\027\047\033\050\026\051\022\001\002\000\010" +
    "\005\uffb4\010\uffb4\011\uffb4\001\002\000\040\005\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\001\002\000\040\005\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\001\002\000\024" +
    "\004\064\013\067\016\060\030\032\031\030\046\027\047" +
    "\033\050\026\051\022\001\002\000\020\005\uffda\010\uffda" +
    "\011\uffda\017\uffda\020\uffda\021\142\022\143\001\002\000" +
    "\024\004\064\013\067\016\060\030\032\031\030\046\027" +
    "\047\033\050\026\051\022\001\002\000\024\004\064\013" +
    "\067\016\060\030\032\031\030\046\027\047\033\050\026" +
    "\051\022\001\002\000\030\005\uffd7\010\uffd7\011\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\023\147\024\145\025\150" +
    "\026\146\001\002\000\024\004\064\013\067\016\060\030" +
    "\032\031\030\046\027\047\033\050\026\051\022\001\002" +
    "\000\024\004\064\013\067\016\060\030\032\031\030\046" +
    "\027\047\033\050\026\051\022\001\002\000\024\004\064" +
    "\013\067\016\060\030\032\031\030\046\027\047\033\050" +
    "\026\051\022\001\002\000\024\004\064\013\067\016\060" +
    "\030\032\031\030\046\027\047\033\050\026\051\022\001" +
    "\002\000\034\005\uffd2\010\uffd2\011\uffd2\012\153\013\152" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\001\002\000\024\004\064\013\067\016\060" +
    "\030\032\031\030\046\027\047\033\050\026\051\022\001" +
    "\002\000\024\004\064\013\067\016\060\030\032\031\030" +
    "\046\027\047\033\050\026\051\022\001\002\000\040\005" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\122\015\123" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\001\002\000\040\005\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\122\015\123\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\001\002" +
    "\000\034\005\uffd3\010\uffd3\011\uffd3\012\153\013\152\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\001\002\000\034\005\uffd4\010\uffd4\011\uffd4\012" +
    "\153\013\152\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\001\002\000\034\005\uffd5\010" +
    "\uffd5\011\uffd5\012\153\013\152\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\001\002\000" +
    "\030\005\uffd8\010\uffd8\011\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\147\024\145\025\150\026\146\001\002\000" +
    "\006\010\134\011\163\001\002\000\046\003\uffe5\004\uffe5" +
    "\006\uffe5\007\uffe5\013\uffe5\016\uffe5\030\uffe5\031\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\001\002\000\024\004\064\013" +
    "\067\016\060\030\032\031\030\046\027\047\033\050\026" +
    "\051\022\001\002\000\014\005\uffdc\010\uffdc\011\uffdc\017" +
    "\140\020\uffdc\001\002\000\040\005\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\001\002" +
    "\000\024\004\064\013\067\016\060\030\032\031\030\046" +
    "\027\047\033\050\026\051\022\001\002\000\010\005\uffde" +
    "\010\uffde\011\uffde\001\002\000\004\005\172\001\002\000" +
    "\040\005\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\001\002\000\024\004\064\013\067" +
    "\016\060\030\032\031\030\046\027\047\033\050\026\051" +
    "\022\001\002\000\004\005\175\001\002\000\042\003\075" +
    "\004\064\006\045\013\067\016\060\030\032\031\030\036" +
    "\074\037\062\041\057\042\061\043\100\046\027\047\033" +
    "\050\026\051\022\001\002\000\046\003\uffeb\004\uffeb\006" +
    "\uffeb\007\uffeb\013\uffeb\016\uffeb\030\uffeb\031\uffeb\036\uffeb" +
    "\037\uffeb\040\200\041\uffeb\042\uffeb\043\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\051\uffeb\001\002\000\044\003\uffe0\004\uffe0" +
    "\006\uffe0\007\uffe0\013\uffe0\016\uffe0\030\uffe0\031\uffe0\036" +
    "\uffe0\037\uffe0\041\uffe0\042\uffe0\043\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\001\002\000\040\004\064\006\045\013" +
    "\067\016\060\030\032\031\030\036\074\037\062\041\057" +
    "\042\061\043\100\046\027\047\033\050\026\051\022\001" +
    "\002\000\044\003\uffdf\004\uffdf\006\uffdf\007\uffdf\013\uffdf" +
    "\016\uffdf\030\uffdf\031\uffdf\036\uffdf\037\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\001\002" +
    "\000\004\011\204\001\002\000\046\003\uffe1\004\uffe1\006" +
    "\uffe1\007\uffe1\013\uffe1\016\uffe1\030\uffe1\031\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\046\uffe1\047" +
    "\uffe1\050\uffe1\051\uffe1\001\002\000\046\003\uffe2\004\uffe2" +
    "\006\uffe2\007\uffe2\013\uffe2\016\uffe2\030\uffe2\031\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\001\002\000\040\005\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\001\002\000\024\004\064\013\067\016\060\030\032" +
    "\031\030\046\027\047\033\050\026\051\022\001\002\000" +
    "\004\005\210\001\002\000\040\004\064\006\045\013\067" +
    "\016\060\030\032\031\030\036\074\037\112\041\057\042" +
    "\061\043\100\046\027\047\033\050\026\051\022\001\002" +
    "\000\046\003\uffe3\004\uffe3\006\uffe3\007\uffe3\013\uffe3\016" +
    "\uffe3\030\uffe3\031\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\001" +
    "\002\000\046\003\uffe7\004\uffe7\006\uffe7\007\uffe7\013\uffe7" +
    "\016\uffe7\030\uffe7\031\uffe7\036\uffe7\037\uffe7\040\uffe7\041" +
    "\uffe7\042\uffe7\043\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\001\002\000\006\011\214\027\215\001\002\000\054\003" +
    "\uffef\004\uffef\006\uffef\007\uffef\013\uffef\016\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037" +
    "\uffef\041\uffef\042\uffef\043\uffef\046\uffef\047\uffef\050\uffef" +
    "\051\uffef\001\002\000\014\030\032\031\030\046\027\047" +
    "\033\050\026\001\002\000\004\011\217\001\002\000\054" +
    "\003\uffee\004\uffee\006\uffee\007\uffee\013\uffee\016\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\041\uffee\042\uffee\043\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\006\002\004\003\003\001\001\000\006\004" +
    "\010\005\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\036\013\034\016\035\017\037\001" +
    "\001\000\004\007\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\036\017\042\001\001\000\002" +
    "\001\001\000\004\006\045\001\001\000\004\010\046\001" +
    "\001\000\002\001\001\000\010\005\050\011\047\014\051" +
    "\001\001\000\002\001\001\000\004\012\212\001\001\000" +
    "\040\006\062\007\100\012\065\015\101\022\072\023\102" +
    "\024\054\025\071\026\075\027\053\030\064\031\067\032" +
    "\076\033\070\034\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\100\012\123\033\204\034\052\001\001" +
    "\000\030\007\100\012\065\024\201\025\071\026\075\027" +
    "\053\030\064\031\067\032\076\033\070\034\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\007\100\012" +
    "\065\024\170\025\071\026\075\027\053\030\064\031\067" +
    "\032\076\033\070\034\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\100\012\123\033\165\034\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\100\012\065\021\161" +
    "\024\130\025\071\026\075\027\053\030\064\031\067\032" +
    "\076\033\070\034\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\104" +
    "\001\001\000\034\005\050\007\100\011\047\012\065\024" +
    "\105\025\071\026\075\027\053\030\064\031\067\032\076" +
    "\033\070\034\052\001\001\000\002\001\001\000\030\007" +
    "\100\012\065\024\107\025\071\026\075\027\053\030\064" +
    "\031\067\032\076\033\070\034\052\001\001\000\002\001" +
    "\001\000\034\006\062\007\100\012\065\022\112\024\054" +
    "\025\071\026\075\027\053\030\064\031\067\032\076\033" +
    "\070\034\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\100\012\065\024\114\025\071\026\075\027" +
    "\053\030\064\031\067\032\076\033\070\034\052\001\001" +
    "\000\002\001\001\000\034\006\062\007\100\012\065\022" +
    "\116\024\054\025\071\026\075\027\053\030\064\031\067" +
    "\032\076\033\070\034\052\001\001\000\002\001\001\000" +
    "\034\006\062\007\100\012\065\022\120\024\054\025\071" +
    "\026\075\027\053\030\064\031\067\032\076\033\070\034" +
    "\052\001\001\000\002\001\001\000\012\007\100\012\123" +
    "\033\136\034\052\001\001\000\012\007\100\012\123\033" +
    "\124\034\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\100\012" +
    "\065\020\131\021\132\024\130\025\071\026\075\027\053" +
    "\030\064\031\067\032\076\033\070\034\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\007\100\012\065\024\134\025\071\026\075\027\053\030" +
    "\064\031\067\032\076\033\070\034\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\100\012\123\027\140\030\064\031\067\032\076\033\070" +
    "\034\052\001\001\000\002\001\001\000\020\007\100\012" +
    "\123\030\160\031\067\032\076\033\070\034\052\001\001" +
    "\000\020\007\100\012\123\030\143\031\067\032\076\033" +
    "\070\034\052\001\001\000\002\001\001\000\016\007\100" +
    "\012\123\031\157\032\076\033\070\034\052\001\001\000" +
    "\016\007\100\012\123\031\156\032\076\033\070\034\052" +
    "\001\001\000\016\007\100\012\123\031\155\032\076\033" +
    "\070\034\052\001\001\000\016\007\100\012\123\031\150" +
    "\032\076\033\070\034\052\001\001\000\002\001\001\000" +
    "\014\007\100\012\123\032\154\033\070\034\052\001\001" +
    "\000\014\007\100\012\123\032\153\033\070\034\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\100\012\123" +
    "\026\164\027\053\030\064\031\067\032\076\033\070\034" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\007\100\012\065\024\167\025\071\026\075\027\053\030" +
    "\064\031\067\032\076\033\070\034\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\100\012\065\024\173\025\071\026\075\027\053\030\064" +
    "\031\067\032\076\033\070\034\052\001\001\000\002\001" +
    "\001\000\040\006\062\007\100\012\065\015\176\022\175" +
    "\023\102\024\054\025\071\026\075\027\053\030\064\031" +
    "\067\032\076\033\070\034\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\006\062\007\100\012\065\022" +
    "\120\023\200\024\054\025\071\026\075\027\053\030\064" +
    "\031\067\032\076\033\070\034\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\100\012\065\024\206\025" +
    "\071\026\075\027\053\030\064\031\067\032\076\033\070" +
    "\034\052\001\001\000\002\001\001\000\034\006\062\007" +
    "\100\012\065\022\210\024\054\025\071\026\075\027\053" +
    "\030\064\031\067\032\076\033\070\034\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\215\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private Symbol symbol;
	public JSONObject program_json = new JSONObject();

	private boolean debug = true;
	
	public void syntax_error(Symbol s){
	    System.out.println("Ocurrio un errorx1");
	}

	public String print(JSONObject item){
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        JsonParser jp = new JsonParser();
        JsonElement je = jp.parse(item.toString());
        String prettyJsonString = gson.toJson(je);
        return prettyJsonString;
    }

    public Symbol getSymbol(){
        return symbol;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= edecl_list 
            {
              Object RESULT =null;
		int LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object LIST = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          JSONObject program_json = new JSONObject();
          program_json.put("declarations", LIST);
          System.out.println(program_json);
          RESULT = program_json;
	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // edecl_list ::= edecl_list edecl 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(LEFT instanceof ArrayList){
        ArrayList declarations =  (ArrayList) LEFT;
        declarations.add(RIGHT);
        RESULT = declarations;
    }else{
        ArrayList declarations = new ArrayList();
        declarations.add(RIGHT);
        RESULT = declarations;
    }

	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // edecl_list ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // edecl_list ::= error SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // edecl ::= type_spec name_expr SEMI 
            {
              Object RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	    RESULT = new Declaration(NAME, TYPE);
	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // edecl ::= type_spec name_expr ASSIGN const_expr SEMI 
            {
              Object RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object VALUE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new Declaration(NAME, TYPE);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // edecl ::= type_spec name_expr LPAREN opt_param_list RPAREN block 
            {
              Object RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int PARAMSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int PARAMSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList PARAMS = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int BODYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int BODYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object BODY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Function func = new Function(NAME, TYPE);
            func.setParameters(PARAMS);
            RESULT = func;
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("edecl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_spec ::= BOOLEAN 
            {
              String RESULT =null;
		 RESULT = "boolean"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_spec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_spec ::= CHAR 
            {
              String RESULT =null;
		
	    RESULT = "char";
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_spec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type_spec ::= INT 
            {
              String RESULT =null;
		
	    RESULT = "int";
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_spec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_spec ::= STRING 
            {
              String RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_spec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type_spec ::= CHAR STAR 
            {
              String RESULT =null;
		
	    RESULT = "char*";
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_spec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_spec ::= INT STAR 
            {
              String RESULT =null;
		
	    RESULT = "int*";
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_spec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // block ::= LBRACE decl_list stmt_list RBRACE 
            {
              Object RESULT =null;
		int DECLSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int DECLSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object DECLS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int STMTSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int STMTSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object STMTS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl_list ::= decl_list decl 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl_list ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decl ::= type_spec name_expr SEMI 
            {
              Object RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // decl ::= type_spec name_expr ASSIGN const_expr SEMI 
            {
              Object RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object VALUE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt_list ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= matched_stmt 
            {
              Object RESULT =null;
		int STMTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int STMTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object STMT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= unmatched_stmt 
            {
              Object RESULT =null;
		int STMTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int STMTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object STMT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // matched_stmt ::= IF LPAREN expr RPAREN matched_stmt ELSE matched_stmt 
            {
              Object RESULT =null;
		int CONDITIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int CONDITIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object CONDITION = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int IFCLAUSEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int IFCLAUSEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object IFCLAUSE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ELSECLAUSEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ELSECLAUSEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ELSECLAUSE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // matched_stmt ::= expr SEMI 
            {
              Object RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object EXPR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // matched_stmt ::= block 
            {
              Object RESULT =null;
		int BLOCKleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int BLOCKright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object BLOCK = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // matched_stmt ::= PRINT arg_list SEMI 
            {
              Object RESULT =null;
		int ARGSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ARGSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ARGS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // matched_stmt ::= FOR LPAREN decl_list expr SEMI expr RPAREN matched_stmt 
            {
              Object RESULT =null;
		int CONDITIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int CONDITIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object CONDITION = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ITERATIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ITERATIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ITERATION = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int BODYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int BODYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object BODY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // matched_stmt ::= WHILE LPAREN expr RPAREN matched_stmt 
            {
              Object RESULT =null;
		int CONDITIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int CONDITIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object CONDITION = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int BODYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int BODYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object BODY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // matched_stmt ::= RETURN expr SEMI 
            {
              Object RESULT =null;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object VALUE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // matched_stmt ::= RETURN SEMI 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("matched_stmt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unmatched_stmt ::= IF LPAREN expr RPAREN stmt 
            {
              Object RESULT =null;
		int CONDITIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int CONDITIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object CONDITION = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int IFCLAUSEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int IFCLAUSEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object IFCLAUSE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unmatched_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unmatched_stmt ::= IF LPAREN expr RPAREN matched_stmt ELSE unmatched_stmt 
            {
              Object RESULT =null;
		int CONDITIONleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int CONDITIONright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object CONDITION = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int IFCLAUSEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int IFCLAUSEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object IFCLAUSE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ELSECLAUSEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ELSECLAUSEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ELSECLAUSE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unmatched_stmt",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= name_expr ASSIGN expr 
            {
              Object RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object VALUE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		


	 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= or_expr 
            {
              Object RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object EXPR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("ghhh");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // or_expr ::= or_expr OR and_expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // or_expr ::= and_expr 
            {
              Object RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object EXPR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_expr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // and_expr ::= and_expr AND eq_expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // and_expr ::= eq_expr 
            {
              Object RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object EXPR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expr",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // eq_expr ::= eq_expr EQ rel_expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // eq_expr ::= eq_expr NE rel_expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // eq_expr ::= rel_expr 
            {
              Object RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object EXPR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("eq_expr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rel_expr ::= rel_expr LT add_expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // rel_expr ::= rel_expr GT add_expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rel_expr ::= rel_expr LE add_expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rel_expr ::= rel_expr GE add_expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rel_expr ::= add_expr 
            {
              Object RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object EXPR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_expr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // add_expr ::= add_expr ADD mul_expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("add_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // add_expr ::= add_expr SUB mul_expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("add_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // add_expr ::= mul_expr 
            {
              Object RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object EXPR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("add_expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mul_expr ::= mul_expr STAR unary_expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mul_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mul_expr ::= mul_expr DIV unary_expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mul_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mul_expr ::= unary_expr 
            {
              Object RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object EXPR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("mul_expr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unary_expr ::= NOT unary_expr 
            {
              Object RESULT =null;
		int ARGleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ARGright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ARG = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unary_expr ::= SUB unary_expr 
            {
              Object RESULT =null;
		int ARGleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ARGright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ARG = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unary_expr ::= atomic_expr 
            {
              Object RESULT =null;
		int EXPRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int EXPRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object EXPR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expr",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // atomic_expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int MIDDLEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int MIDDLEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object MIDDLE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // atomic_expr ::= name_expr 
            {
              Object RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atomic_expr ::= const_expr 
            {
              Object RESULT =null;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object VALUE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atomic_expr ::= name_expr LPAREN opt_arg_list RPAREN 
            {
              Object RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ARGSleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ARGSright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ARGS = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atomic_expr ::= name_expr INCREMENT 
            {
              Object RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atomic_expr ::= name_expr DECREMENT 
            {
              Object RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atomic_expr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // name_expr ::= IDENTIFIER 
            {
              String RESULT =null;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT  = NAME;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("name_expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // const_expr ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object VALUE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // const_expr ::= INT_LITERAL 
            {
              Object RESULT =null;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String VALUE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // const_expr ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int VALUEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int VALUEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object VALUE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // const_expr ::= TRUE 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // const_expr ::= FALSE 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_expr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // opt_param_list ::= param_list 
            {
              ArrayList RESULT =null;
		int LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList LIST = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	     ArrayList parameters = (ArrayList) LIST;
	     RESULT = LIST;
	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_param_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // opt_param_list ::= 
            {
              ArrayList RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_param_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // param_list ::= param_list COMMA param 
            {
              ArrayList RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList LEFT = (ArrayList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    ArrayList parameters = (ArrayList) LEFT;
        parameters.add(RIGHT);
        RESULT = parameters;
	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // param_list ::= param 
            {
              ArrayList RESULT =null;
		int PARAMleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PARAMright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PARAM = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	    ArrayList parameters = new ArrayList();
        parameters.add(PARAM);
        RESULT = parameters;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // param ::= type_spec IDENTIFIER 
            {
              Object RESULT =null;
		int TYPEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int TYPEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String TYPE = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int NAMEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int NAMEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String NAME = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          Declaration param  = new Declaration(NAME, TYPE);
          RESULT = param;
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // opt_arg_list ::= arg_list 
            {
              Object RESULT =null;
		int LISTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int LISTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object LIST = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_arg_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // opt_arg_list ::= 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opt_arg_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arg_list ::= arg_list COMMA expr 
            {
              Object RESULT =null;
		int LEFTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LEFTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object LEFT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int RIGHTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int RIGHTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object RIGHT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arg_list ::= expr 
            {
              Object RESULT =null;
		int ARGleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ARGright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ARG = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
